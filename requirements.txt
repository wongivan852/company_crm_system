# requirements.txt
Django==4.2.7
djangorestframework==3.14.0
django-filter==23.3
django-cors-headers==4.3.1
psycopg2-binary==2.9.7
celery==5.3.4
redis==5.0.1
python-decouple==3.8
requests==2.31.0
Pillow==10.0.1
gunicorn==21.2.0
whitenoise==6.6.0

# Optional for enhanced features
sendgrid==6.10.0
twilio==8.10.0
python-telegram-bot==20.6

# Development dependencies
pytest==7.4.3
pytest-django==4.7.0
black==23.9.1
flake8==6.1.0

# management/commands/load_sample_data.py
from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import timedelta
from crm.models import Customer, Course, Conference, Enrollment
import random

class Command(BaseCommand):
    help = 'Load sample data for testing the CRM system'

    def add_arguments(self, parser):
        parser.add_argument(
            '--customers',
            type=int,
            default=50,
            help='Number of sample customers to create'
        )
        parser.add_argument(
            '--courses',
            type=int,
            default=10,
            help='Number of sample courses to create'
        )

    def handle(self, *args, **options):
        self.stdout.write('Loading sample data...')
        
        # Create sample customers
        customers_count = options['customers']
        courses_count = options['courses']
        
        self.create_sample_customers(customers_count)
        self.create_sample_courses(courses_count)
        self.create_sample_conferences()
        self.create_sample_enrollments()
        
        self.stdout.write(
            self.style.SUCCESS(
                f'Successfully loaded sample data: '
                f'{customers_count} customers, {courses_count} courses'
            )
        )

    def create_sample_customers(self, count):
        sample_customers = [
            {
                'first_name': 'Alice',
                'last_name': 'Johnson',
                'email': 'alice.johnson@email.com',
                'phone': '+1234567890',
                'whatsapp_number': '+1234567890',
                'customer_type': 'individual',
                'status': 'active',
                'company': 'Tech Corp',
                'position': 'Software Engineer',
                'preferred_communication': 'email',
                'interests': 'Python, Data Science, Machine Learning'
            },
            {
                'first_name': 'Bob',
                'last_name': 'Smith',
                'email': 'bob.smith@email.com',
                'phone': '+1234567891',
                'whatsapp_number': '+1234567891',
                'customer_type': 'corporate',
                'status': 'active',
                'company': 'Innovation Inc',
                'position': 'CTO',
                'preferred_communication': 'whatsapp',
                'interests': 'Leadership, Technology Strategy'
            },
            {
                'first_name': 'Carol',
                'last_name': 'Williams',
                'email': 'carol.williams@email.com',
                'phone': '+1234567892',
                'wechat_id': 'carol_w_2023',
                'customer_type': 'student',
                'status': 'prospect',
                'company': 'University College',
                'position': 'Graduate Student',
                'preferred_communication': 'wechat',
                'interests': 'Web Development, UI/UX Design'
            },
            {
                'first_name': 'David',
                'last_name': 'Brown',
                'email': 'david.brown@email.com',
                'phone': '+1234567893',
                'whatsapp_number': '+1234567893',
                'customer_type': 'instructor',
                'status': 'active',
                'company': 'EduTech Solutions',
                'position': 'Senior Instructor',
                'preferred_communication': 'email',
                'interests': 'Educational Technology, Course Design'
            },
            {
                'first_name': 'Eva',
                'last_name': 'Davis',
                'email': 'eva.davis@email.com',
                'phone': '+1234567894',
                'whatsapp_number': '+1234567894',
                'customer_type': 'individual',
                'status': 'alumni',
                'company': 'StartupXYZ',
                'position': 'Product Manager',
                'preferred_communication': 'whatsapp',
                'interests': 'Product Management, Agile, Scrum'
            }
        ]
        
        # Create base customers
        for customer_data in sample_customers:
            customer, created = Customer.objects.get_or_create(
                email=customer_data['email'],
                defaults=customer_data
            )
            if created:
                self.stdout.write(f'Created customer: {customer.first_name} {customer.last_name}')
        
        # Create additional random customers
        first_names = ['John', 'Jane', 'Mike', 'Sarah', 'Chris', 'Lisa', 'Tom', 'Anna']
        last_names = ['Wilson', 'Garcia', 'Martinez', 'Anderson', 'Taylor', 'Thomas', 'Moore', 'Jackson']
        companies = ['TechStart', 'InnovateCorp', 'FutureTech', 'DataSystems', 'CloudSolutions']
        positions = ['Developer', 'Analyst', 'Manager', 'Consultant', 'Engineer']
        customer_types = ['individual', 'corporate', 'student', 'instructor']
        statuses = ['active', 'prospect', 'inactive', 'alumni']
        
        existing_count = Customer.objects.count()
        remaining = count - existing_count
        
        for i in range(remaining):
            first_name = random.choice(first_names)
            last_name = random.choice(last_names)
            email = f'{first_name.lower()}.{last_name.lower()}{i+100}@email.com'
            
            customer_data = {
                'first_name': first_name,
                'last_name': last_name,
                'email': email,
                'phone': f'+123456{7900 + i}',
                'whatsapp_number': f'+123456{7900 + i}' if random.choice([True, False]) else '',
                'wechat_id': f'{first_name.lower()}_{i+100}' if random.choice([True, False]) else '',
                'customer_type': random.choice(customer_types),
                'status': random.choice(statuses),
                'company': random.choice(companies),
                'position': random.choice(positions),
                'preferred_communication': random.choice(['email', 'whatsapp', 'wechat']),
                'marketing_consent': random.choice([True, False]),
                'interests': random.choice([
                    'Python Programming, Web Development',
                    'Data Science, Machine Learning',
                    'Digital Marketing, SEO',
                    'Project Management, Leadership',
                    'Cloud Computing, DevOps'
                ])
            }
            
            customer, created = Customer.objects.get_or_create(
                email=email,
                defaults=customer_data
            )

    def create_sample_courses(self, count):
        sample_courses = [
            {
                'title': 'Python Programming Bootcamp',
                'description': 'Comprehensive Python programming course for beginners to advanced learners',
                'course_type': 'online',
                'duration_hours': 40,
                'price': 299.00,
                'max_participants': 30,
                'start_date': timezone.now() + timedelta(days=30),
                'end_date': timezone.now() + timedelta(days=45),
                'registration_deadline': timezone.now() + timedelta(days=25)
            },
            {
                'title': 'Data Science with R',
                'description': 'Learn data analysis and visualization using R programming language',
                'course_type': 'hybrid',
                'duration_hours': 35,
                'price': 399.00,
                'max_participants': 25,
                'start_date': timezone.now() + timedelta(days=20),
                'end_date': timezone.now() + timedelta(days=30),
                'registration_deadline': timezone.now() + timedelta(days=15)
            },
            {
                'title': 'Digital Marketing Masterclass',
                'description': 'Complete digital marketing strategy and implementation course',
                'course_type': 'online',
                'duration_hours': 25,
                'price': 199.00,
                'max_participants': 50,
                'start_date': timezone.now() + timedelta(days=10),
                'end_date': timezone.now() + timedelta(days=20),
                'registration_deadline': timezone.now() + timedelta(days=5)
            },
            {
                'title': 'Machine Learning Workshop',
                'description': 'Hands-on machine learning workshop with practical projects',
                'course_type': 'workshop',
                'duration_hours': 16,
                'price': 449.00,
                'max_participants': 20,
                'start_date': timezone.now() + timedelta(days=15),
                'end_date': timezone.now() + timedelta(days=16),
                'registration_deadline': timezone.now() + timedelta(days=10)
            },
            {
                'title': 'Web Development with React',
                'description': 'Modern web development using React and associated technologies',
                'course_type': 'online',
                'duration_hours': 45,
                'price': 349.00,
                'max_participants': 35,
                'start_date': timezone.now() + timedelta(days=40),
                'end_date': timezone.now() + timedelta(days=60),
                'registration_deadline': timezone.now() + timedelta(days=35)
            }
        ]
        
        for course_data in sample_courses:
            course, created = Course.objects.get_or_create(
                title=course_data['title'],
                defaults=course_data
            )
            if created:
                self.stdout.write(f'Created course: {course.title}')
        
        # Create additional random courses if needed
        course_titles = [
            'Advanced JavaScript', 'Cloud Computing Basics', 'DevOps Fundamentals',
            'UI/UX Design Principles', 'Project Management Certification'
        ]
        
        existing_count = Course.objects.count()
        remaining = count - existing_count
        
        for i in range(remaining):
            if i < len(course_titles):
                title = course_titles[i]
            else:
                title = f'Technical Course {i+1}'
            
            course_data = {
                'title': title,
                'description': f'Professional {title.lower()} course with hands-on experience',
                'course_type': random.choice(['online', 'offline', 'hybrid', 'workshop']),
                'duration_hours': random.randint(15, 50),
                'price': random.randint(150, 500),
                'max_participants': random.randint(15, 40),
                'start_date': timezone.now() + timedelta(days=random.randint(10, 60)),
                'end_date': timezone.now() + timedelta(days=random.randint(70, 100)),
                'registration_deadline': timezone.now() + timedelta(days=random.randint(5, 50))
            }
            
            course, created = Course.objects.get_or_create(
                title=title,
                defaults=course_data
            )

    def create_sample_conferences(self):
        conferences = [
            {
                'name': 'Tech Innovation Summit 2025',
                'description': 'Annual technology innovation conference featuring industry leaders',
                'venue': 'Convention Center, Downtown',
                'start_date': timezone.now() + timedelta(days=90),
                'end_date': timezone.now() + timedelta(days=92),
                'registration_fee': 299.00,
                'max_attendees': 500
            },
            {
                'name': 'Education Technology Conference',
                'description': 'Conference focused on educational technology and online learning',
                'venue': 'University Auditorium',
                'start_date': timezone.now() + timedelta(days=120),
                'end_date': timezone.now() + timedelta(days=121),
                'registration_fee': 199.00,
                'max_attendees': 300
            },
            {
                'name': 'Data Science Symposium',
                'description': 'Symposium on latest trends in data science and analytics',
                'venue': 'Business District Conference Hall',
                'start_date': timezone.now() + timedelta(days=75),
                'end_date': timezone.now() + timedelta(days=75),
                'registration_fee': 149.00,
                'max_attendees': 200
            }
        ]
        
        for conf_data in conferences:
            conference, created = Conference.objects.get_or_create(
                name=conf_data['name'],
                defaults=conf_data
            )
            if created:
                self.stdout.write(f'Created conference: {conference.name}')

    def create_sample_enrollments(self):
        customers = list(Customer.objects.all()[:20])  # First 20 customers
        courses = list(Course.objects.all())
        
        # Create random enrollments
        for customer in customers:
            # Enroll each customer in 1-3 random courses
            num_enrollments = random.randint(1, min(3, len(courses)))
            selected_courses = random.sample(courses, num_enrollments)
            
            for course in selected_courses:
                enrollment, created = Enrollment.objects.get_or_create(
                    customer=customer,
                    course=course,
                    defaults={
                        'status': random.choice(['registered', 'confirmed', 'completed']),
                        'payment_status': random.choice(['pending', 'paid']),
                        'notes': f'Enrolled via sample data for {customer.first_name}'
                    }
                )
                if created:
                    self.stdout.write(f'Enrolled {customer.first_name} in {course.title}')

# celery.py (Celery configuration)
import os
from celery import Celery
from django.conf import settings

# Set the default Django settings module for the 'celery' program.
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'crm_project.settings')

app = Celery('crm_project')

# Using a string here means the worker doesn't have to serialize
# the configuration object to child processes.
app.config_from_object('django.conf:settings', namespace='CELERY')

# Load task modules from all registered Django apps.
app.autodiscover_tasks()

# Periodic tasks
from celery.schedules import crontab

app.conf.beat_schedule = {
    'send-course-reminders': {
        'task': 'crm.tasks.send_course_reminders',
        'schedule': crontab(hour=9, minute=0),  # Daily at 9 AM
    },
    'send-weekly-newsletter': {
        'task': 'crm.tasks.send_weekly_newsletter',
        'schedule': crontab(hour=10, minute=0, day_of_week=1),  # Monday at 10 AM
    },
}

app.conf.timezone = 'UTC'

# Additional tasks for the CRM system
# tasks.py (additional tasks)
from celery import shared_task
from django.utils import timezone
from datetime import timedelta
from .models import Customer, Course, Conference
from .communication_services import CommunicationManager

@shared_task
def send_weekly_newsletter():
    """Send weekly newsletter to subscribed customers"""
    customers = Customer.objects.filter(
        marketing_consent=True,
        status='active'
    )
    
    # Get upcoming courses and conferences
    upcoming_courses = Course.objects.filter(
        start_date__gte=timezone.now(),
        start_date__lte=timezone.now() + timedelta(days=30),
        is_active=True
    )[:5]
    
    upcoming_conferences = Conference.objects.filter(
        start_date__gte=timezone.now(),
        start_date__lte=timezone.now() + timedelta(days=60),
        is_active=True
    )[:3]
    
    # Create newsletter content
    subject = "Weekly Newsletter - Upcoming Courses & Events"
    content = f"""
    Dear Learning Community,
    
    Here's what's coming up this week:
    
    🎓 UPCOMING COURSES:
    """
    
    for course in upcoming_courses:
        content += f"• {course.title} - Starting {course.start_date.strftime('%B %d, %Y')}\n"
    
    content += f"""
    
    🎪 UPCOMING CONFERENCES:
    """
    
    for conference in upcoming_conferences:
        content += f"• {conference.name} - {conference.start_date.strftime('%B %d, %Y')}\n"
    
    content += """
    
    Visit our website for more details and registration.
    
    Best regards,
    Learning Institute Team
    """
    
    comm_manager = CommunicationManager()
    sent_count = 0
    
    for customer in customers:
        success, message = comm_manager.send_message(
            customer, 'email', subject, content
        )
        if success:
            sent_count += 1
    
    return f"Newsletter sent to {sent_count} customers"

@shared_task
def cleanup_old_communication_logs():
    """Clean up communication logs older than 6 months"""
    from .models import CommunicationLog
    
    cutoff_date = timezone.now() - timedelta(days=180)
    deleted_count = CommunicationLog.objects.filter(
        sent_at__lt=cutoff_date
    ).delete()[0]
    
    return f"Deleted {deleted_count} old communication logs"

@shared_task
def generate_monthly_report():
    """Generate monthly analytics report"""
    from django.db.models import Count, Sum
    
    # Get current month data
    current_month = timezone.now().replace(day=1)
    
    # Customer statistics
    new_customers = Customer.objects.filter(
        created_at__gte=current_month
    ).count()
    
    # Course statistics
    course_enrollments = Enrollment.objects.filter(
        enrollment_date__gte=current_month
    ).count()
    
    # Revenue calculation
    revenue = Enrollment.objects.filter(
        enrollment_date__gte=current_month,
        payment_status='paid'
    ).aggregate(
        total=Sum('course__price')
    )['total'] or 0
    
    report = {
        'month': current_month.strftime('%B %Y'),
        'new_customers': new_customers,
        'course_enrollments': course_enrollments,
        'revenue': float(revenue),
        'generated_at': timezone.now().isoformat()
    }
    
    # Save report or send to administrators
    # You can extend this to save to database or send via email
    
    return report

# Docker files for production deployment
# Dockerfile
"""
FROM python:3.9-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Set work directory
WORKDIR /app

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        postgresql-client \
        build-essential \
        libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt /app/
RUN pip install --no-cache-dir -r requirements.txt

# Copy project
COPY . /app/

# Collect static files
RUN python manage.py collectstatic --noinput

# Run the application
CMD ["gunicorn", "crm_project.wsgi:application", "--bind", "0.0.0.0:8000"]
"""

# docker-compose.yml for development
"""
version: '3.8'

services:
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: crm_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"

  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"

  web:
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://postgres:password@db:5432/crm_db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis

  celery:
    build: .
    command: celery -A crm_project worker --loglevel=info
    volumes:
      - .:/app
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/crm_db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis

  celery-beat:
    build: .
    command: celery -A crm_project beat --loglevel=info
    volumes:
      - .:/app
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/crm_db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis

volumes:
  postgres_data:
"""