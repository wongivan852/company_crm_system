# Enhanced Docker Compose for Production Deployment
# Supports both internet and intranet access

version: '3.8'

services:
  db:
    image: postgres:13
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./backups:/backups
    environment:
      POSTGRES_DB: crm_db
      POSTGRES_USER: crm_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "127.0.0.1:5432:5432"  # Only expose to localhost
    networks:
      - crm-internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crm_user -d crm_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:6-alpine
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"  # Only expose to localhost
    networks:
      - crm-internal
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  web:
    build: .
    restart: unless-stopped
    command: gunicorn --bind 0.0.0.0:8000 --workers 3 --timeout 120 crm_project.wsgi:application
    volumes:
      - ./crm_project:/app/crm_project
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    ports:
      - "127.0.0.1:8000:8000"  # Only expose to localhost (nginx will proxy)
    environment:
      - DEBUG=0
      - DATABASE_URL=postgresql://crm_user:${DB_PASSWORD}@db:5432/crm_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SECRET_KEY=${SECRET_KEY}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - crm-internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery:
    build: .
    restart: unless-stopped
    command: celery -A crm_project worker --loglevel=info --concurrency=2
    volumes:
      - ./crm_project:/app/crm_project
      - ./logs:/app/logs
    environment:
      - DATABASE_URL=postgresql://crm_user:${DB_PASSWORD}@db:5432/crm_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - crm-internal

  celery-beat:
    build: .
    restart: unless-stopped
    command: celery -A crm_project beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./crm_project:/app/crm_project
      - ./logs:/app/logs
    environment:
      - DATABASE_URL=postgresql://crm_user:${DB_PASSWORD}@db:5432/crm_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - crm-internal

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"      # HTTP access (redirects to HTTPS)
      - "443:443"    # HTTPS access (internet)
      - "8080:8080"  # Internal access (intranet)
    volumes:
      - ./nginx-deployment.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./ssl:/etc/ssl  # Mount SSL certificates
      - ./logs/nginx:/var/log/nginx
    depends_on:
      web:
        condition: service_healthy
    networks:
      - crm-internal

  # Backup service
  backup:
    image: postgres:13
    restart: "no"
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - ./backups:/backups
    environment:
      POSTGRES_DB: crm_db
      POSTGRES_USER: crm_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
      - crm-internal
    entrypoint: |
      bash -c '
        set -e
        echo "Creating backup..."
        pg_dump -h db -U crm_user -d crm_db > /backups/crm_backup_$$(date +%Y%m%d_%H%M%S).sql
        echo "Backup completed"
        find /backups -name "crm_backup_*.sql" -mtime +7 -delete
      '
    depends_on:
      db:
        condition: service_healthy

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  crm-internal:
    driver: bridge
