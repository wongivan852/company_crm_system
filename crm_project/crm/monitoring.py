# monitoring.py - Application monitoring and health checks\nimport logging\nfrom django.core.cache import cache\nfrom django.db import connection\nfrom django.conf import settings\nfrom django.http import JsonResponse\nfrom django.utils import timezone\nfrom .models import Customer, Course, CommunicationLog\nimport time\nimport psutil\nimport os\n\nlogger = logging.getLogger('crm')\n\n\nclass HealthChecker:\n    \"\"\"Application health checking utilities\"\"\"\n    \n    def __init__(self):\n        self.checks = {\n            'database': self.check_database,\n            'models': self.check_models,\n            'disk_space': self.check_disk_space,\n            'memory': self.check_memory,\n            'external_apis': self.check_external_apis,\n        }\n    \n    def run_all_checks(self):\n        \"\"\"Run all health checks and return results\"\"\"\n        results = {\n            'timestamp': timezone.now().isoformat(),\n            'overall_status': 'healthy',\n            'checks': {}\n        }\n        \n        for check_name, check_func in self.checks.items():\n            try:\n                start_time = time.time()\n                status, message, details = check_func()\n                duration = time.time() - start_time\n                \n                results['checks'][check_name] = {\n                    'status': status,\n                    'message': message,\n                    'details': details,\n                    'duration_ms': round(duration * 1000, 2)\n                }\n                \n                if status != 'healthy':\n                    results['overall_status'] = 'unhealthy'\n                    \n            except Exception as e:\n                results['checks'][check_name] = {\n                    'status': 'error',\n                    'message': f'Health check failed: {str(e)}',\n                    'details': {},\n                    'duration_ms': 0\n                }\n                results['overall_status'] = 'unhealthy'\n                \n                logger.error(\n                    f\"Health check {check_name} failed: {str(e)}\",\n                    extra={'health_check_error': True, 'check_name': check_name},\n                    exc_info=True\n                )\n        \n        return results\n    \n    def check_database(self):\n        \"\"\"Check database connectivity and basic queries\"\"\"\n        try:\n            # Test basic connection\n            with connection.cursor() as cursor:\n                cursor.execute(\"SELECT 1\")\n                cursor.fetchone()\n            \n            # Test model queries\n            customer_count = Customer.objects.count()\n            \n            return 'healthy', 'Database connection OK', {\n                'customer_count': customer_count,\n                'db_vendor': connection.vendor\n            }\n        \n        except Exception as e:\n            return 'unhealthy', f'Database error: {str(e)}', {}\n    \n    def check_models(self):\n        \"\"\"Check model integrity and recent data\"\"\"\n        try:\n            # Check for recent activity\n            recent_customers = Customer.objects.filter(\n                created_at__gte=timezone.now() - timezone.timedelta(days=7)\n            ).count()\n            \n            recent_communications = CommunicationLog.objects.filter(\n                sent_at__gte=timezone.now() - timezone.timedelta(days=1)\n            ).count()\n            \n            return 'healthy', 'Models functioning normally', {\n                'recent_customers_7d': recent_customers,\n                'recent_communications_24h': recent_communications,\n                'total_customers': Customer.objects.count(),\n            }\n        \n        except Exception as e:\n            return 'unhealthy', f'Model check error: {str(e)}', {}\n    \n    def check_disk_space(self):\n        \"\"\"Check available disk space\"\"\"\n        try:\n            disk_usage = psutil.disk_usage('/')\n            free_gb = disk_usage.free / (1024**3)\n            total_gb = disk_usage.total / (1024**3)\n            used_percent = (disk_usage.used / disk_usage.total) * 100\n            \n            if used_percent > 90:\n                status = 'unhealthy'\n                message = f'Disk space critical: {used_percent:.1f}% used'\n            elif used_percent > 80:\n                status = 'warning'\n                message = f'Disk space low: {used_percent:.1f}% used'\n            else:\n                status = 'healthy'\n                message = f'Disk space OK: {used_percent:.1f}% used'\n            \n            return status, message, {\n                'free_gb': round(free_gb, 2),\n                'total_gb': round(total_gb, 2),\n                'used_percent': round(used_percent, 1)\n            }\n        \n        except Exception as e:\n            return 'error', f'Disk check error: {str(e)}', {}\n    \n    def check_memory(self):\n        \"\"\"Check memory usage\"\"\"\n        try:\n            memory = psutil.virtual_memory()\n            used_percent = memory.percent\n            available_gb = memory.available / (1024**3)\n            \n            if used_percent > 90:\n                status = 'unhealthy'\n                message = f'Memory critical: {used_percent:.1f}% used'\n            elif used_percent > 80:\n                status = 'warning'\n                message = f'Memory high: {used_percent:.1f}% used'\n            else:\n                status = 'healthy'\n                message = f'Memory OK: {used_percent:.1f}% used'\n            \n            return status, message, {\n                'used_percent': round(used_percent, 1),\n                'available_gb': round(available_gb, 2),\n                'total_gb': round(memory.total / (1024**3), 2)\n            }\n        \n        except Exception as e:\n            return 'error', f'Memory check error: {str(e)}', {}\n    \n    def check_external_apis(self):\n        \"\"\"Check external API configurations\"\"\"\n        try:\n            api_status = {}\n            overall_status = 'healthy'\n            \n            # Check WhatsApp API config\n            if hasattr(settings, 'WHATSAPP_ACCESS_TOKEN') and settings.WHATSAPP_ACCESS_TOKEN:\n                if settings.WHATSAPP_ACCESS_TOKEN.startswith('your-'):\n                    api_status['whatsapp'] = 'not_configured'\n                    overall_status = 'warning'\n                else:\n                    api_status['whatsapp'] = 'configured'\n            else:\n                api_status['whatsapp'] = 'missing'\n                overall_status = 'warning'\n            \n            # Check WeChat API config\n            if hasattr(settings, 'WECHAT_CORP_ID') and settings.WECHAT_CORP_ID:\n                if settings.WECHAT_CORP_ID.startswith('your-'):\n                    api_status['wechat'] = 'not_configured'\n                    overall_status = 'warning'\n                else:\n                    api_status['wechat'] = 'configured'\n            else:\n                api_status['wechat'] = 'missing'\n                overall_status = 'warning'\n            \n            # Check email config\n            if hasattr(settings, 'EMAIL_HOST_USER') and settings.EMAIL_HOST_USER:\n                if settings.EMAIL_HOST_USER.startswith('your-'):\n                    api_status['email'] = 'not_configured'\n                    overall_status = 'warning'\n                else:\n                    api_status['email'] = 'configured'\n            else:\n                api_status['email'] = 'missing'\n                overall_status = 'warning'\n            \n            message = 'External API configuration check complete'\n            if overall_status == 'warning':\n                message += ' (some APIs not properly configured)'\n            \n            return overall_status, message, api_status\n        \n        except Exception as e:\n            return 'error', f'External API check error: {str(e)}', {}\n\n\ndef health_check_view(request):\n    \"\"\"Django view for health check endpoint\"\"\"\n    checker = HealthChecker()\n    results = checker.run_all_checks()\n    \n    # Determine HTTP status code\n    if results['overall_status'] == 'healthy':\n        status_code = 200\n    elif results['overall_status'] == 'warning':\n        status_code = 200  # Still operational\n    else:\n        status_code = 503  # Service unavailable\n    \n    # Log health check\n    logger.info(\n        f\"Health check completed: {results['overall_status']}\",\n        extra={\n            'health_check': True,\n            'overall_status': results['overall_status'],\n            'failed_checks': [\n                name for name, check in results['checks'].items() \n                if check['status'] != 'healthy'\n            ]\n        }\n    )\n    \n    return JsonResponse(results, status=status_code)\n\n\nclass ApplicationMetrics:\n    \"\"\"Application metrics collection\"\"\"\n    \n    @staticmethod\n    def get_basic_metrics():\n        \"\"\"Get basic application metrics\"\"\"\n        try:\n            return {\n                'customers': {\n                    'total': Customer.objects.count(),\n                    'active': Customer.objects.filter(status='active').count(),\n                    'prospects': Customer.objects.filter(status='prospect').count(),\n                    'recent_24h': Customer.objects.filter(\n                        created_at__gte=timezone.now() - timezone.timedelta(days=1)\n                    ).count(),\n                },\n                'courses': {\n                    'total': Course.objects.count(),\n                    'active': Course.objects.filter(is_active=True).count(),\n                },\n                'communications': {\n                    'total_24h': CommunicationLog.objects.filter(\n                        sent_at__gte=timezone.now() - timezone.timedelta(days=1)\n                    ).count(),\n                    'email_24h': CommunicationLog.objects.filter(\n                        channel='email',\n                        sent_at__gte=timezone.now() - timezone.timedelta(days=1)\n                    ).count(),\n                    'whatsapp_24h': CommunicationLog.objects.filter(\n                        channel='whatsapp',\n                        sent_at__gte=timezone.now() - timezone.timedelta(days=1)\n                    ).count(),\n                },\n                'timestamp': timezone.now().isoformat()\n            }\n        except Exception as e:\n            logger.error(f\"Metrics collection error: {str(e)}\", exc_info=True)\n            return {'error': str(e), 'timestamp': timezone.now().isoformat()}\n\n\ndef metrics_view(request):\n    \"\"\"Django view for metrics endpoint\"\"\"\n    metrics = ApplicationMetrics.get_basic_metrics()\n    return JsonResponse(metrics)