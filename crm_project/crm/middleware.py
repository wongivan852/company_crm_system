# middleware.py - Custom middleware for error handling and security\nimport logging\nimport json\nfrom django.http import JsonResponse, HttpResponseServerError\nfrom django.core.exceptions import PermissionDenied, ValidationError\nfrom django.conf import settings\nfrom django.utils.deprecation import MiddlewareMixin\nfrom rest_framework.views import exception_handler\nfrom rest_framework.response import Response\nfrom rest_framework import status\nimport traceback\nimport time\n\n# Get loggers\nlogger = logging.getLogger('crm')\nsecurity_logger = logging.getLogger('crm.security')\n\n\nclass ErrorHandlingMiddleware(MiddlewareMixin):\n    \"\"\"Middleware for centralized error handling and logging\"\"\"\n    \n    def process_exception(self, request, exception):\n        \"\"\"Handle exceptions and log them appropriately\"\"\"\n        \n        # Get client IP\n        client_ip = self.get_client_ip(request)\n        user = getattr(request, 'user', None)\n        user_id = user.id if user and user.is_authenticated else 'anonymous'\n        \n        # Log error details\n        error_data = {\n            'error_type': exception.__class__.__name__,\n            'error_message': str(exception),\n            'request_path': request.get_full_path(),\n            'request_method': request.method,\n            'client_ip': client_ip,\n            'user_id': user_id,\n            'user_agent': request.META.get('HTTP_USER_AGENT', ''),\n        }\n        \n        # Handle different types of exceptions\n        if isinstance(exception, PermissionDenied):\n            security_logger.warning(\n                f\"Permission denied: {error_data}\",\n                extra={'security_event': 'permission_denied', **error_data}\n            )\n            if request.content_type == 'application/json':\n                return JsonResponse(\n                    {'error': 'Permission denied', 'code': 'PERMISSION_DENIED'},\n                    status=403\n                )\n        \n        elif isinstance(exception, ValidationError):\n            logger.warning(\n                f\"Validation error: {error_data}\",\n                extra={'validation_error': True, **error_data}\n            )\n            if request.content_type == 'application/json':\n                return JsonResponse(\n                    {\n                        'error': 'Validation failed',\n                        'details': exception.message_dict if hasattr(exception, 'message_dict') else str(exception),\n                        'code': 'VALIDATION_ERROR'\n                    },\n                    status=400\n                )\n        \n        else:\n            # Log unexpected errors\n            logger.error(\n                f\"Unexpected error: {error_data}\",\n                extra={'unexpected_error': True, **error_data},\n                exc_info=True\n            )\n            \n            # Don't return response in debug mode (let Django handle it)\n            if not settings.DEBUG and request.content_type == 'application/json':\n                return JsonResponse(\n                    {\n                        'error': 'Internal server error',\n                        'code': 'INTERNAL_ERROR',\n                        'request_id': getattr(request, 'request_id', None)\n                    },\n                    status=500\n                )\n        \n        # Return None to let Django handle the exception normally\n        return None\n    \n    def get_client_ip(self, request):\n        \"\"\"Get client IP address from request\"\"\"\n        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')\n        if x_forwarded_for:\n            ip = x_forwarded_for.split(',')[0]\n        else:\n            ip = request.META.get('REMOTE_ADDR')\n        return ip\n\n\nclass SecurityMiddleware(MiddlewareMixin):\n    \"\"\"Middleware for security logging and monitoring\"\"\"\n    \n    def process_request(self, request):\n        \"\"\"Log security-relevant requests\"\"\"\n        \n        # Add request ID for tracking\n        request.request_id = f\"{int(time.time())}-{id(request)}\"\n        \n        # Log suspicious activity\n        self.check_suspicious_activity(request)\n        \n        return None\n    \n    def check_suspicious_activity(self, request):\n        \"\"\"Check for suspicious request patterns\"\"\"\n        \n        client_ip = self.get_client_ip(request)\n        user_agent = request.META.get('HTTP_USER_AGENT', '')\n        \n        # Check for common attack patterns\n        suspicious_patterns = [\n            'admin', 'wp-admin', 'phpmyadmin', '.env', 'config',\n            'backup', 'test', 'tmp', '.git', 'debug'\n        ]\n        \n        path = request.get_full_path().lower()\n        \n        # Check for suspicious paths\n        if any(pattern in path for pattern in suspicious_patterns):\n            security_logger.warning(\n                f\"Suspicious path access: {path}\",\n                extra={\n                    'security_event': 'suspicious_path',\n                    'client_ip': client_ip,\n                    'path': path,\n                    'user_agent': user_agent,\n                    'request_id': request.request_id\n                }\n            )\n        \n        # Check for missing User-Agent (common in bots)\n        if not user_agent:\n            security_logger.info(\n                f\"Request without User-Agent from {client_ip}\",\n                extra={\n                    'security_event': 'missing_user_agent',\n                    'client_ip': client_ip,\n                    'path': path,\n                    'request_id': request.request_id\n                }\n            )\n    \n    def get_client_ip(self, request):\n        \"\"\"Get client IP address from request\"\"\"\n        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')\n        if x_forwarded_for:\n            ip = x_forwarded_for.split(',')[0]\n        else:\n            ip = request.META.get('REMOTE_ADDR')\n        return ip\n\n\nclass RequestLoggingMiddleware(MiddlewareMixin):\n    \"\"\"Middleware for request/response logging\"\"\"\n    \n    def process_request(self, request):\n        \"\"\"Log incoming requests\"\"\"\n        request.start_time = time.time()\n        \n        # Log API requests\n        if request.path.startswith('/api/'):\n            logger.info(\n                f\"API Request: {request.method} {request.get_full_path()}\",\n                extra={\n                    'request_type': 'api',\n                    'method': request.method,\n                    'path': request.get_full_path(),\n                    'client_ip': self.get_client_ip(request),\n                    'user_id': getattr(request.user, 'id', None) if hasattr(request, 'user') else None,\n                }\n            )\n        \n        return None\n    \n    def process_response(self, request, response):\n        \"\"\"Log response details\"\"\"\n        \n        if hasattr(request, 'start_time'):\n            duration = time.time() - request.start_time\n            \n            # Log slow requests\n            if duration > 5.0:  # 5 seconds\n                logger.warning(\n                    f\"Slow request: {request.method} {request.get_full_path()} - {duration:.2f}s\",\n                    extra={\n                        'slow_request': True,\n                        'duration': duration,\n                        'method': request.method,\n                        'path': request.get_full_path(),\n                        'status_code': response.status_code,\n                    }\n                )\n            \n            # Log API responses\n            if request.path.startswith('/api/'):\n                logger.info(\n                    f\"API Response: {response.status_code} - {duration:.2f}s\",\n                    extra={\n                        'response_type': 'api',\n                        'status_code': response.status_code,\n                        'duration': duration,\n                        'path': request.get_full_path(),\n                    }\n                )\n        \n        return response\n    \n    def get_client_ip(self, request):\n        \"\"\"Get client IP address from request\"\"\"\n        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')\n        if x_forwarded_for:\n            ip = x_forwarded_for.split(',')[0]\n        else:\n            ip = request.META.get('REMOTE_ADDR')\n        return ip\n\n\ndef custom_drf_exception_handler(exc, context):\n    \"\"\"Custom exception handler for Django REST Framework\"\"\"\n    \n    # Call REST framework's default exception handler first\n    response = exception_handler(exc, context)\n    \n    if response is not None:\n        request = context.get('request')\n        view = context.get('view')\n        \n        # Log API errors\n        logger.error(\n            f\"API Error: {exc.__class__.__name__} - {str(exc)}\",\n            extra={\n                'api_error': True,\n                'exception_type': exc.__class__.__name__,\n                'exception_message': str(exc),\n                'view_name': view.__class__.__name__ if view else None,\n                'path': request.get_full_path() if request else None,\n                'method': request.method if request else None,\n                'status_code': response.status_code,\n            },\n            exc_info=True\n        )\n        \n        # Customize error response format\n        custom_response_data = {\n            'error': True,\n            'message': 'An error occurred',\n            'code': exc.__class__.__name__.upper(),\n            'details': response.data,\n            'timestamp': time.time(),\n        }\n        \n        # Add request ID if available\n        if request and hasattr(request, 'request_id'):\n            custom_response_data['request_id'] = request.request_id\n        \n        response.data = custom_response_data\n    \n    return response