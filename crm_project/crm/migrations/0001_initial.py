# Generated by Django 5.2.5 on 2025-08-20 02:28

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Conference',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('venue', models.CharField(max_length=300)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('registration_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('max_attendees', models.PositiveIntegerField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'indexes': [models.Index(fields=['is_active', 'start_date'], name='crm_confere_is_acti_9b60d6_idx'), models.Index(fields=['start_date'], name='crm_confere_start_d_41bc3b_idx'), models.Index(fields=['created_at'], name='crm_confere_created_da6f45_idx')],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('course_type', models.CharField(choices=[('online', 'Online Course'), ('offline', 'In-Person Course'), ('hybrid', 'Hybrid Course'), ('workshop', 'Workshop'), ('seminar', 'Seminar')], max_length=20)),
                ('duration_hours', models.PositiveIntegerField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('max_participants', models.PositiveIntegerField()),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('registration_deadline', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'indexes': [models.Index(fields=['course_type', 'is_active'], name='crm_course_course__1849a6_idx'), models.Index(fields=['start_date'], name='crm_course_start_d_8a2490_idx'), models.Index(fields=['registration_deadline'], name='crm_course_registr_a5fc09_idx'), models.Index(fields=['is_active', 'start_date'], name='crm_course_is_acti_bc68f8_idx')],
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, help_text='Given name/First name', max_length=100)),
                ('middle_name', models.CharField(blank=True, help_text='Middle name(s)', max_length=100)),
                ('last_name', models.CharField(blank=True, help_text='Family name/Last name/Surname', max_length=100)),
                ('preferred_name', models.CharField(blank=True, help_text='Nickname or preferred name', max_length=100)),
                ('name_suffix', models.CharField(blank=True, help_text='Jr., Sr., III, etc.', max_length=20)),
                ('maiden_name', models.CharField(blank=True, help_text='Maiden name (if applicable)', max_length=100)),
                ('other_names', models.CharField(blank=True, help_text='Other names, aliases, or previous names', max_length=200)),
                ('title', models.CharField(blank=True, help_text='Title (Dr., Prof., Mr., Ms., etc.)', max_length=50)),
                ('designation', models.CharField(blank=True, choices=[('', 'Select Designation'), ('professor', 'Professor'), ('prof', 'Prof.'), ('dr', 'Dr.'), ('phd', 'Ph.D.'), ('doctorate', 'Doctorate'), ('professor_emeritus', 'Professor Emeritus'), ('associate_professor', 'Associate Professor'), ('assistant_professor', 'Assistant Professor'), ('lecturer', 'Lecturer'), ('senior_lecturer', 'Senior Lecturer'), ('ir', 'Ir.'), ('eng', 'Eng.'), ('pe', 'P.E.'), ('eit', 'E.I.T.'), ('md', 'M.D.'), ('do', 'D.O.'), ('dds', 'D.D.S.'), ('dvm', 'D.V.M.'), ('jd', 'J.D.'), ('esquire', 'Esq.'), ('cpa', 'C.P.A.'), ('cfa', 'C.F.A.'), ('pmp', 'P.M.P.'), ('mba', 'M.B.A.'), ('rev', 'Rev.'), ('father', 'Father'), ('pastor', 'Pastor'), ('captain', 'Captain'), ('colonel', 'Colonel'), ('major', 'Major'), ('general', 'General'), ('other', 'Other')], help_text='Professional or academic designation', max_length=50)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('P', 'Prefer not to say')], help_text='Gender', max_length=1)),
                ('date_of_birth', models.DateField(blank=True, help_text='Date of birth', null=True)),
                ('nationality', models.CharField(blank=True, help_text='Nationality', max_length=100)),
                ('emergency_contact_name', models.CharField(blank=True, help_text='Emergency contact full name', max_length=200)),
                ('emergency_contact_relationship', models.CharField(blank=True, help_text='Relationship to emergency contact', max_length=100)),
                ('emergency_contact_phone', models.CharField(blank=True, help_text='Emergency contact phone number', max_length=20)),
                ('emergency_contact_email', models.EmailField(blank=True, help_text='Emergency contact email', max_length=254)),
                ('email_primary', models.EmailField(blank=True, help_text='Primary email address', max_length=254, null=True, validators=[django.core.validators.EmailValidator()])),
                ('email_secondary', models.EmailField(blank=True, help_text='Secondary email address', max_length=254, validators=[django.core.validators.EmailValidator()])),
                ('phone_primary', models.CharField(blank=True, help_text='Primary phone number with country code', max_length=20)),
                ('phone_primary_country_code', models.CharField(blank=True, help_text='Country code for primary phone', max_length=5)),
                ('phone_secondary', models.CharField(blank=True, help_text='Secondary phone number with country code', max_length=20)),
                ('phone_secondary_country_code', models.CharField(blank=True, help_text='Country code for secondary phone', max_length=5)),
                ('fax', models.CharField(blank=True, help_text='Fax number', max_length=20)),
                ('fax_country_code', models.CharField(blank=True, help_text='Country code for fax', max_length=5)),
                ('whatsapp_number', models.CharField(blank=True, max_length=20)),
                ('whatsapp_country_code', models.CharField(blank=True, help_text='Country code for WhatsApp', max_length=5)),
                ('wechat_id', models.CharField(blank=True, max_length=100)),
                ('linkedin_profile', models.URLField(blank=True, help_text='LinkedIn profile URL', validators=[django.core.validators.URLValidator()])),
                ('facebook_profile', models.URLField(blank=True, help_text='Facebook profile URL', validators=[django.core.validators.URLValidator()])),
                ('twitter_handle', models.CharField(blank=True, help_text='Twitter/X handle (without @)', max_length=100)),
                ('instagram_handle', models.CharField(blank=True, help_text='Instagram handle (without @)', max_length=100)),
                ('youtube_handle', models.CharField(blank=True, help_text='YouTube handle (without @)', max_length=100, null=True)),
                ('youtube_channel_url', models.URLField(blank=True, help_text='Full YouTube channel URL', validators=[django.core.validators.URLValidator()])),
                ('country_region', models.CharField(blank=True, choices=[('', 'Select Country/Region'), ('DZ', 'Algeria'), ('AO', 'Angola'), ('BJ', 'Benin'), ('BW', 'Botswana'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('CM', 'Cameroon'), ('CV', 'Cape Verde'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo (Democratic Republic)'), ('CI', "Côte d'Ivoire"), ('DJ', 'Djibouti'), ('EG', 'Egypt'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('ET', 'Ethiopia'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GH', 'Ghana'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('KE', 'Kenya'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libya'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('ML', 'Mali'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('NA', 'Namibia'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('RW', 'Rwanda'), ('ST', 'São Tomé and Príncipe'), ('SN', 'Senegal'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('SS', 'South Sudan'), ('SD', 'Sudan'), ('SZ', 'Swaziland'), ('TZ', 'Tanzania'), ('TG', 'Togo'), ('TN', 'Tunisia'), ('UG', 'Uganda'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe'), ('AQ', 'Antarctica'), ('AF', 'Afghanistan'), ('AM', 'Armenia'), ('AZ', 'Azerbaijan'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BT', 'Bhutan'), ('BN', 'Brunei'), ('KH', 'Cambodia'), ('CN', 'China'), ('CY', 'Cyprus'), ('GE', 'Georgia'), ('HK', 'Hong Kong SAR'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran'), ('IQ', 'Iraq'), ('IL', 'Israel'), ('JP', 'Japan'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', 'Laos'), ('LB', 'Lebanon'), ('MO', 'Macau SAR'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('MN', 'Mongolia'), ('MM', 'Myanmar'), ('NP', 'Nepal'), ('KP', 'North Korea'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestine'), ('PH', 'Philippines'), ('QA', 'Qatar'), ('SA', 'Saudi Arabia'), ('SG', 'Singapore'), ('KR', 'South Korea'), ('LK', 'Sri Lanka'), ('SY', 'Syria'), ('TW', 'Taiwan'), ('TJ', 'Tajikistan'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('AE', 'United Arab Emirates'), ('UZ', 'Uzbekistan'), ('VN', 'Vietnam'), ('YE', 'Yemen'), ('AL', 'Albania'), ('AD', 'Andorra'), ('AT', 'Austria'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BA', 'Bosnia and Herzegovina'), ('BG', 'Bulgaria'), ('HR', 'Croatia'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('EE', 'Estonia'), ('FI', 'Finland'), ('FR', 'France'), ('DE', 'Germany'), ('GR', 'Greece'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IE', 'Ireland'), ('IT', 'Italy'), ('XK', 'Kosovo'), ('LV', 'Latvia'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MK', 'Macedonia'), ('MT', 'Malta'), ('MD', 'Moldova'), ('MC', 'Monaco'), ('ME', 'Montenegro'), ('NL', 'Netherlands'), ('NO', 'Norway'), ('PL', 'Poland'), ('PT', 'Portugal'), ('RO', 'Romania'), ('RU', 'Russia'), ('SM', 'San Marino'), ('RS', 'Serbia'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('ES', 'Spain'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('UA', 'Ukraine'), ('GB', 'United Kingdom'), ('VA', 'Vatican City'), ('AG', 'Antigua and Barbuda'), ('BS', 'Bahamas'), ('BB', 'Barbados'), ('BZ', 'Belize'), ('CA', 'Canada'), ('CR', 'Costa Rica'), ('CU', 'Cuba'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('SV', 'El Salvador'), ('GD', 'Grenada'), ('GT', 'Guatemala'), ('HT', 'Haiti'), ('HN', 'Honduras'), ('JM', 'Jamaica'), ('MX', 'Mexico'), ('NI', 'Nicaragua'), ('PA', 'Panama'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('VC', 'Saint Vincent and the Grenadines'), ('TT', 'Trinidad and Tobago'), ('US', 'United States'), ('AU', 'Australia'), ('FJ', 'Fiji'), ('KI', 'Kiribati'), ('MH', 'Marshall Islands'), ('FM', 'Micronesia'), ('NR', 'Nauru'), ('NZ', 'New Zealand'), ('PW', 'Palau'), ('PG', 'Papua New Guinea'), ('WS', 'Samoa'), ('SB', 'Solomon Islands'), ('TO', 'Tonga'), ('TV', 'Tuvalu'), ('VU', 'Vanuatu'), ('AR', 'Argentina'), ('BO', 'Bolivia'), ('BR', 'Brazil'), ('CL', 'Chile'), ('CO', 'Colombia'), ('EC', 'Ecuador'), ('GY', 'Guyana'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('SR', 'Suriname'), ('UY', 'Uruguay'), ('VE', 'Venezuela'), ('OTHER', 'Other (please specify in notes)')], help_text='Select your country or region', max_length=10)),
                ('customer_type', models.CharField(choices=[('individual', 'Individual Learner'), ('corporate', 'Corporate Client'), ('student', 'Student'), ('instructor', 'Instructor'), ('youtuber', 'YouTuber/Content Creator')], max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('prospect', 'Prospect'), ('alumni', 'Alumni')], default='prospect', max_length=20)),
                ('company_primary', models.CharField(blank=True, help_text='Current/Primary company', max_length=200)),
                ('position_primary', models.CharField(blank=True, help_text='Current/Primary position', max_length=100)),
                ('company_secondary', models.CharField(blank=True, help_text='Secondary/Previous company', max_length=200)),
                ('position_secondary', models.CharField(blank=True, help_text='Secondary/Previous position', max_length=100)),
                ('company_website', models.URLField(blank=True, help_text='Company website', validators=[django.core.validators.URLValidator()])),
                ('address_primary', models.TextField(blank=True, help_text='Primary address (Home/Office)')),
                ('address_secondary', models.TextField(blank=True, help_text='Secondary address (Mailing/Alternative)')),
                ('address', models.CharField(blank=True, help_text='Street address', max_length=500)),
                ('city', models.CharField(blank=True, help_text='City', max_length=100)),
                ('state_province', models.CharField(blank=True, help_text='State or Province', max_length=100)),
                ('postal_code', models.CharField(blank=True, help_text='Postal/ZIP code', max_length=20)),
                ('preferred_learning_format', models.CharField(blank=True, max_length=50)),
                ('interests', models.TextField(blank=True, help_text='Comma-separated interests')),
                ('education_level', models.CharField(blank=True, help_text='Highest education level', max_length=100)),
                ('profession', models.CharField(blank=True, help_text='Current profession/occupation', max_length=100)),
                ('years_of_experience', models.PositiveIntegerField(blank=True, help_text='Years of professional experience', null=True)),
                ('preferred_communication_method', models.CharField(choices=[('email', 'Email'), ('phone', 'Phone'), ('whatsapp', 'WhatsApp'), ('wechat', 'WeChat'), ('sms', 'SMS')], default='email', help_text='Preferred method of communication', max_length=20)),
                ('marketing_consent', models.BooleanField(default=False, help_text='Consent to receive marketing communications')),
                ('data_processing_consent', models.BooleanField(default=True, help_text='Consent to data processing')),
                ('newsletter_subscription', models.BooleanField(default=False, help_text='Subscribe to newsletter')),
                ('internal_notes', models.TextField(blank=True, help_text='Internal notes (not visible to customer)')),
                ('special_requirements', models.TextField(blank=True, help_text='Special requirements or accommodations')),
                ('source', models.CharField(blank=True, help_text='How customer found us', max_length=100)),
                ('referral_source', models.CharField(blank=True, help_text='Referral source if applicable', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['email_primary'], name='crm_custome_email_p_e2a267_idx'), models.Index(fields=['customer_type', 'status'], name='crm_custome_custome_22ad63_idx'), models.Index(fields=['country_region'], name='crm_custome_country_6b36a7_idx'), models.Index(fields=['source'], name='crm_custome_source_5f98c6_idx'), models.Index(fields=['marketing_consent'], name='crm_custome_marketi_8dc72f_idx'), models.Index(fields=['phone_primary'], name='crm_custome_phone_p_4563f1_idx'), models.Index(fields=['whatsapp_number'], name='crm_custome_whatsap_374cb7_idx'), models.Index(fields=['youtube_handle'], name='crm_custome_youtube_07ed9e_idx'), models.Index(fields=['created_at', 'status'], name='crm_custome_created_739a98_idx'), models.Index(fields=['customer_type', 'created_at'], name='crm_custome_custome_48c3d1_idx')],
            },
        ),
        migrations.CreateModel(
            name='ConferenceRegistration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('special_requirements', models.TextField(blank=True)),
                ('conference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crm.conference')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crm.customer')),
            ],
            options={
                'indexes': [models.Index(fields=['customer'], name='crm_confere_custome_77e2d6_idx'), models.Index(fields=['conference'], name='crm_confere_confere_3c4bfc_idx'), models.Index(fields=['registration_date'], name='crm_confere_registr_dab327_idx')],
                'unique_together': {('customer', 'conference')},
            },
        ),
        migrations.CreateModel(
            name='CommunicationLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('channel', models.CharField(choices=[('email', 'Email'), ('whatsapp', 'WhatsApp'), ('wechat', 'WeChat'), ('phone', 'Phone'), ('in_person', 'In Person'), ('youtube', 'YouTube')], max_length=20)),
                ('subject', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('is_outbound', models.BooleanField(default=True)),
                ('external_message_id', models.CharField(blank=True, max_length=200)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crm.customer')),
            ],
            options={
                'indexes': [models.Index(fields=['customer', 'channel'], name='crm_communi_custome_d81612_idx'), models.Index(fields=['sent_at'], name='crm_communi_sent_at_fd66af_idx'), models.Index(fields=['is_outbound'], name='crm_communi_is_outb_8ca42e_idx'), models.Index(fields=['channel', 'sent_at'], name='crm_communi_channel_7f3e95_idx')],
            },
        ),
        migrations.CreateModel(
            name='CustomerCommunicationPreference',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('communication_type', models.CharField(choices=[('email_primary', 'Primary Email'), ('email_secondary', 'Secondary Email'), ('phone_primary', 'Primary Phone'), ('phone_secondary', 'Secondary Phone'), ('whatsapp', 'WhatsApp'), ('wechat', 'WeChat'), ('linkedin', 'LinkedIn'), ('facebook', 'Facebook'), ('twitter', 'Twitter/X'), ('instagram', 'Instagram'), ('fax', 'Fax')], max_length=20)),
                ('priority', models.IntegerField(choices=[(1, 'Primary'), (2, 'Secondary'), (3, 'Tertiary'), (4, 'Emergency Only'), (5, 'Do Not Use')], default=2)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.CharField(blank=True, help_text="e.g., 'Work hours only', 'Weekends preferred'", max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='communication_preferences', to='crm.customer')),
            ],
            options={
                'ordering': ['customer', 'priority', 'communication_type'],
                'unique_together': {('customer', 'communication_type')},
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('enrollment_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('registered', 'Registered'), ('confirmed', 'Confirmed'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show')], default='registered', max_length=20)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crm.course')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crm.customer')),
            ],
            options={
                'indexes': [models.Index(fields=['customer', 'status'], name='crm_enrollm_custome_15b5ef_idx'), models.Index(fields=['course', 'status'], name='crm_enrollm_course__f35f20_idx'), models.Index(fields=['enrollment_date'], name='crm_enrollm_enrollm_f946e4_idx'), models.Index(fields=['payment_status'], name='crm_enrollm_payment_64b8f3_idx')],
                'unique_together': {('customer', 'course')},
            },
        ),
        migrations.CreateModel(
            name='YouTubeMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message_type', models.CharField(choices=[('direct_message', 'Direct Message'), ('comment', 'Video Comment'), ('community_post', 'Community Post'), ('collaboration', 'Collaboration Request'), ('business', 'Business Inquiry')], default='direct_message', max_length=20)),
                ('subject', models.CharField(help_text='Message subject or title', max_length=200)),
                ('content', models.TextField(help_text='Message content')),
                ('target_youtube_handle', models.CharField(help_text='YouTube handle to send to', max_length=100)),
                ('target_video_url', models.URLField(blank=True, help_text='Specific video URL if commenting')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending Send'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('read', 'Read'), ('replied', 'Replied'), ('failed', 'Failed'), ('bounced', 'Bounced')], default='draft', max_length=20)),
                ('priority', models.IntegerField(default=3, help_text='1=High, 2=Medium, 3=Low')),
                ('sent_by', models.CharField(blank=True, help_text='Who sent the message', max_length=100)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('response_received', models.BooleanField(default=False)),
                ('response_content', models.TextField(blank=True, help_text='Response received from YouTuber')),
                ('response_received_at', models.DateTimeField(blank=True, null=True)),
                ('message_opened', models.BooleanField(default=False)),
                ('opened_at', models.DateTimeField(blank=True, null=True)),
                ('click_count', models.IntegerField(default=0)),
                ('error_message', models.TextField(blank=True, help_text='Error details if send failed')),
                ('retry_count', models.IntegerField(default=0)),
                ('max_retries', models.IntegerField(default=3)),
                ('external_message_id', models.CharField(blank=True, help_text='External service message ID', max_length=200)),
                ('platform_data', models.JSONField(blank=True, default=dict, help_text='Platform-specific data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='youtube_messages', to='crm.customer')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['customer', 'status'], name='crm_youtube_custome_ecde93_idx'), models.Index(fields=['target_youtube_handle'], name='crm_youtube_target__d217b5_idx'), models.Index(fields=['sent_at'], name='crm_youtube_sent_at_b120b4_idx')],
            },
        ),
    ]
