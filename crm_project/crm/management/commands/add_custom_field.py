#!/usr/bin/env python3
"""
Django management command to add custom fields to Customer model
Usage: python manage.py add_custom_field --field-name "custom_field" --field-type "CharField" --max-length 200
"""

from django.core.management.base import BaseCommand, CommandError
from django.db import connection
from django.apps import apps
import re


class Command(BaseCommand):
    help = 'Add a custom field to the Customer model'

    def add_arguments(self, parser):
        parser.add_argument(
            '--field-name',
            type=str,
            required=True,
            help='Name of the custom field to add'
        )
        parser.add_argument(
            '--field-type',
            type=str,
            choices=['CharField', 'TextField', 'EmailField', 'URLField', 'IntegerField', 'DateField', 'BooleanField'],
            default='CharField',
            help='Type of field to add (default: CharField)'
        )
        parser.add_argument(
            '--max-length',
            type=int,
            default=200,
            help='Maximum length for CharField (default: 200)'
        )
        parser.add_argument(
            '--blank',
            action='store_true',
            help='Allow field to be blank in forms'
        )
        parser.add_argument(
            '--null',
            action='store_true',
            help='Allow field to be null in database'
        )

    def handle(self, *args, **options):
        field_name = options['field_name']
        field_type = options['field_type']
        max_length = options['max_length']
        blank = options['blank']
        null = options['null']

        # Validate field name
        if not re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*$', field_name):
            raise CommandError('Field name must be a valid Python identifier')

        # Check if field already exists
        from crm.models import Customer
        if hasattr(Customer, field_name):
            raise CommandError(f'Field "{field_name}" already exists on Customer model')

        # Generate the field definition
        field_definition = self._generate_field_definition(field_type, max_length, blank, null)

        # Generate migration content
        migration_content = self._generate_migration(field_name, field_definition)

        # Save migration file
        migration_file = self._save_migration(migration_content)

        self.stdout.write(
            self.style.SUCCESS(f'Created migration for custom field "{field_name}"')
        )
        self.stdout.write(f'Migration file: {migration_file}')
        self.stdout.write('')
        self.stdout.write('Next steps:')
        self.stdout.write('1. Run: python manage.py migrate')
        self.stdout.write('2. Update forms.py to include the new field')
        self.stdout.write('3. Update admin.py to include the new field')
        self.stdout.write('4. Update templates if needed')

    def _generate_field_definition(self, field_type, max_length, blank, null):
        """Generate Django field definition string"""
        options = []
        
        if field_type == 'CharField':
            options.append(f'max_length={max_length}')
        
        if blank:
            options.append('blank=True')
        
        if null:
            options.append('null=True')
        
        options_str = ', '.join(options) if options else ''
        return f'models.{field_type}({options_str})'

    def _generate_migration(self, field_name, field_definition):
        """Generate migration file content"""
        import datetime
        timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
        
        migration_content = f'''# Generated by add_custom_field management command
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('crm', '0003_alter_customer_email_primary'),
    ]

    operations = [
        migrations.AddField(
            model_name='customer',
            name='{field_name}',
            field={field_definition},
        ),
    ]
'''
        return migration_content

    def _save_migration(self, content):
        """Save migration to file"""
        import os
        import datetime
        
        # Get migrations directory
        migrations_dir = os.path.join(
            os.path.dirname(os.path.dirname(os.path.dirname(__file__))),
            'migrations'
        )
        
        # Generate migration filename
        timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
        migration_name = f'0004_add_custom_field_{timestamp}.py'
        migration_file = os.path.join(migrations_dir, migration_name)
        
        # Write migration file
        with open(migration_file, 'w') as f:
            f.write(content)
        
        return migration_file
